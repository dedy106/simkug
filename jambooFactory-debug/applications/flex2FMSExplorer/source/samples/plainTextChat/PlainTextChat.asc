
/**
 * PlainTextChat is a very simple plain text chat. Messages are sent from clients
 * via NetConnection.call("PlainTextChat/deliverMessage") and are processed
 * by this classe's deliverMessage method. If they are OK the message
 * is stored in the history stream and then broadcast to all clients
 * using the messages shared object.
 * Clients play back the history and endOfFile streams in a playlist
 * in order to get the chat history. Only the history of the current
 * chat session is recorded and available to clients that join the 
 * chat part way through. Warning: This chat is not designed to be 
 * secure. For example no filtering is done of messages and all clients
 * can send messages.
 */
function PlainTextChat(){
	
	// the messages_so shared object is used to broadcast chat messages:
	this.messages_so = SharedObject.get(this.className + "/messages");
	
	// the history_s stream is used to record the chat history:
	this.history_s = Stream.get(this.className + "/history");  
	this.history_s.record("record");
	this.history_s.syncWrite = true;

	// the endOfFile_s stream is used in a workaround to the problem of 
	// clients not recognizing when they read to the end of the history
	// stream.
	this.endOfFile_s = Stream.get(this.className + "/endOfFile");  
	this.endOfFile_s.record("record");
	this.endOfFile_s.syncWrite = true;
	this.endOfFile_s.send("endOfFile");
	
	// Create a PlainTextChat object on all clients that has a deliverMessage 
	// method that, in turn, calls this component's deliverMessage function.
	var PlainTextChat = this;
	Client.prototype["PlainTextChat|deliverMessage"] = function(msg){
		PlainTextChat.deliverMessage(this, msg);
	}
}

// Class name is used as the first part of shared object and stream URIs
PlainTextChat.prototype.className = "PlainTextChat";

PlainTextChat.prototype.deliverMessage = function(client, msg){
trace("client: " + client);
	// Save the message in the history
	this.history_s.send("appendMessage", client.user.userName + ": " + msg);
	// Broadcast the message to all clients:
	this.messages_so.send("showMessage", client.user.userName + ": " + msg);
}