/**
 * Graphic objects that represent drawing instructions are stored in the
 * slots of a shared object. Each graphic is given a number for a name.
 * Numbering begins at 0 and ends at length - 1.
 * Note the user of SharedObject.lock() and SharedObject.unlock() to 
 * make sure all the changes go out in one update.
 */

function ScratchPad(){

	this.scratchGraphicsSharedObject = SharedObject.get("ScratchPad/graphics", true);
	
	// If the version is 0 the shared object has nothing in it.
	// So, setup the shared object with length and backgroundColor properties:
	if(this.scratchGraphicsSharedObject.version < 1){
		this.scratchGraphicsSharedObject.lock();
		this.scratchGraphicsSharedObject.setProperty("length", 0);
		this.scratchGraphicsSharedObject.setProperty("backgroundColor", 0xffffff);
		this.scratchGraphicsSharedObject.unlock();
	}
	
	// Setup the client to pass on to this object the clearGraphics,
	// addGraphic, and setBackgroundColor function calls sent by remote clients
	// and initially received on a client object.
	var scratchPad = this;
	
	Client.prototype["ScratchPad|clearGraphics"] = function(){
		scratchPad.clearGraphics(this);
	}

	Client.prototype["ScratchPad|addGraphic"] = function(graphic){
		scratchPad.addGraphic(this, graphic);
	}
	
	Client.prototype["ScratchPad|setBackgroundColor"] = function(color){
		scratchPad.setBackgroundColor(this, color);
	}


}

ScratchPad.prototype.className = "ScratchPad";

/**
 * clearGraphics is called by a remote client and clears all
 * the graphics by deleting all slots named 0, 1, though length - 1.
 */
ScratchPad.prototype.clearGraphics = function(client){
	trace("ScratchPad.clearGraphics>");
	this.scratchGraphicsSharedObject.lock();
	var length = this.scratchGraphicsSharedObject.getProperty("length");
	for (var i = 0; i < length; i++){
		this.scratchGraphicsSharedObject.setProperty(i, null);
	}
	this.scratchGraphicsSharedObject.setProperty("length", 0);
	this.scratchGraphicsSharedObject.unlock();
}

/**
 * addGrapic adds the graphic object sent by the client into
 * a shared object slot named after the number in the length
 * slot. Then length number is incremented and stored back in
 * the length slot.
 */
ScratchPad.prototype.addGraphic = function(client, graphic){
	trace("ScratchPad.addGraphic> " + graphic);
	var length = this.scratchGraphicsSharedObject.getProperty("length");
	this.scratchGraphicsSharedObject.lock();
	this.scratchGraphicsSharedObject.setProperty(length, graphic);
	length++;
	this.scratchGraphicsSharedObject.setProperty("length", length);
	this.scratchGraphicsSharedObject.unlock();
}

/**
 * setBackgroundColor broadcasts the new backgroundColor value
 * to all clients by updating the backgroundColor slot with the new value.
 */
ScratchPad.prototype.setBackgroundColor = function(client, color){
	trace("ScratchPad.setBackgroundColor> color: " + color);
	this.scratchGraphicsSharedObject.setProperty("backgroundColor", color);
}