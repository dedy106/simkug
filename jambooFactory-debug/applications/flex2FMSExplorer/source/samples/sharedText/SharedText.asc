function SharedText(){

	// Create the shared object that will contain each version
	// of the shared text in numbered slots, a slot for the current user 
	// that is editing the shared text area, and a slot for the total 
	// number of versions currently in the shared object.
	// 
	this.text_so = SharedObject.get(this.className + "/text", true);
	this.text_so.setProperty("currentUser", "");
	
	// The shared object is persistent so the text lasts between sessions.
	// As a result we have to initialize length and slot 1 only once.
	// So, of there is no length slot:
	this.text_so.lock();
	if (typeof this.text_so.getProperty("length") != "number") {
		this.text_so.setProperty("length", 1);
		this.text_so.setProperty("1", "Please press the <b>[Edit Text]</b> button to take control of the text area before adding/editing text in it.");
	}
	this.text_so.setProperty("currentUser", "");
	this.text_so.unlock();
	
	// Create a reference to this instance not named "this"
	var sharedText = this;
	
	// Use the reference to this instance (sharedText) to call 
	// functions on the sharedText instance when a function is called on 
	// the client. 
	// Note: "this" in the client method refers to the client.
	
	Client.prototype["SharedText|edit"] = function(){
		return sharedText.edit(this);
	}
	
	Client.prototype["SharedText|save"] = function(newText){
		return sharedText.save(this, newText);
	}
	
	Client.prototype["SharedText|cancel"] = function(){
		return sharedText.cancel(this);
	}
	
	Client.prototype["SharedText|deleteVersion"] = function(versionNumber){
		return sharedText.deleteVersion(this, versionNumber);
	}
	
}

SharedText.prototype.className = "SharedText";

/**
 * When the client calls the edit method the user is requesting
 * control of the text area for editing. If someone else is
 * in control the request is rejected.
 */
SharedText.prototype.edit = function(client){

	var userName = client.user.userName;
	var currentUser = this.text_so.getProperty("currentUser");
	
	if (userName == currentUser){
      // this.text_so.setProperty("currentUser", "");
      return "Error: Duplicate request for control.";
   }
   else if (currentUser != ""){
      return currentUser  + " is editing the text area. Please try again later.";
   }   
   else {
      this.text_so.setProperty("currentUser", userName);
      return "OK";
   }
}

/**
 * When the client calls the save method the user is has completed
 * making edits and wants to save them. They are saved in a new
 * slot (a new version) in the text shared object and control 
 * is released to the first person who presses the Edit button. 
 */
SharedText.prototype.save = function(client, newText){

	var userName = client.user.userName;
	var currentUser = this.text_so.getProperty("currentUser");
	var length;
	
	if (userName == currentUser){
		length = this.text_so.getProperty("length");
		length++;
		this.text_so.lock();
		this.text_so.setProperty(length, newText);
		this.text_so.setProperty("length", length);
		this.text_so.setProperty("currentUser", "");
		this.text_so.unlock();
		return "OK";
	}
	else {
		return "Error: Can't update Text Area. " + currentUser + " is in control.";
	}
		
}

SharedText.prototype.cancel = function(client){
	var userName = client.user.userName;
	var currentUser = this.text_so.getProperty("currentUser");
	var length;
	
	if (userName == currentUser){
		this.text_so.setProperty("currentUser", "");
		return "OK";
	}
	else {
		return "Error: Can't cancel. " + currentUser + " is in control.";
	}

}

SharedText.prototype.deleteVersion = function(client, versionNumber) {

	var userName = client.user.userName;
	var currentUser = this.text_so.getProperty("currentUser");
	var length = this.text_so.getProperty("length");
	
	if (userName == currentUser){

		if(length < 1) {
			return "Error: Cannot delete version " + versionNumber + " when there are no versions to delete.";
		}
		
		if (versionNumber > length) {
			return "Error: Cannot delete version " + versionNumber + " as there is no version of that number.";
		}
		
		this.text_so.lock();
		// This is very inefficient but is simple.
		for (var i = versionNumber; i < length; i++) {
			this.text_so.setProperty(i, this.text_so.getProperty(i + 1));
		}
		this.text_so.setProperty(length, null);
		this.text_so.setProperty("length", length - 1);
		
		this.text_so.setProperty("currentUser", "");
		
		this.text_so.unlock();	

		return "OK";
	}
	else {
		return "Error: Can't cancel. " + currentUser + " is in control.";
	}
}

SharedText.prototype.onClientDisconnect = function(client){
	if (client.user && this.text_so.getProperty("currentUser") == client.user.userName){
		this.text_so.setProperty("currentUser", "");
	}
}