
function UserManager(){
	this.nextUserID = 0;     // ID counter to assign unique IDs.
	this.freeIDPool =[];
	this.clients = {};   // List of client objects by ID.
	this.userNames = {}; // User names in use.
}

UserManager.prototype.className = "UserManager";

UserManager.prototype.authenticate = function(client, credentials){

	trace("UserManager.authenticate> client.referrer: " + client.referrer + ", client.ip: " + client.ip);
	
	if(! client || ! credentials) return false;
	
	if (credentials.rejectConnection) return false;
	
	var userName = Text.trim(credentials.userName);
	var userID   = this.getNextID();
	
	// Supply a unique user name if they didn't supply one:
	if (!userName) {
		userName = "Visitor #" + userID;
	}
	// If they supplied one make sure it isn't in use:
	else {
		// String out any colons as we need them to guarantee unique names:
		userName = userName.replace(/\#/, " ");
		// If the user name isn't unique add Guest: n to it.
		if(this.userNames[userName]){
			userName = "Visitor #" + userID + "(" + userName + ")";
		}
	}
	
	client.user = {
		id: userID,
		userName: userName,
		fullName: Text.trim(credentials.fullName),
		introduction: Text.trim(credentials.introduction),
		role: Text.trim(credentials.role)
	}
	
	// for (var p in client.user) trace("client.user." + p + ": " + client.user[p]);
	
	this.userNames[userName] = client;
	this.clients[userID] = client;
	
	return true;
}

UserManager.prototype.disconnect = function(client){
	if (client.user){
		delete this.userNames[client.user.userName];
		delete this.clients[client.user.userName];
		this.freeIDPool.push(client.user.id);
	}
}

UserManager.prototype.getNextID = function(){
	var userID;
	// If there's nothing in the free pool of ids return
	// the next available one:
	if (this.freeIDPool.length < 1) {
		userID = this.nextUserID++;
		return userID;
	}
	// If there is something in the free pool numerically sort it:
	if (this.freeIDPool.length > 2){
		this.freeIDPool.sort(this.numberOrder);
	}
	// And then return the smallest value:
	return this.freeIDPool.shift();
}

UserManager.prototype.numberOrder = function(a, b){
	return a - b;
}

