_globalContext = this;

load("source/framework/Text.asc");
load("source/framework/UserManager.asc");

/**
 * SampleFramework is a very very simple "sample framework" designed only
 * to provide simple user, client, and sample support. 
 *
 */
function SampleFramework(){
	// trace("SampleFramework>");

	this.sampleObjects = {}; // sample objects by class name.
	
	// Hijack the application as in the Macromedia Communication Components Framework:
	this.application = application;           // Keep a copy of the real application object
	application = new ProxyApplication(this); // Replace it with a proxy

	// Assign onConnect and other methods to the real application object. 
	// See later in this file for the actual function definitions.
	this.application.onAppStart   = onApplicationStart;
	this.application.onAppStop    = onApplicationStop;	
	this.application.onConnect    = onClientConnect;	
	this.application.onDisconnect = onClientDisconnect;
	
	// Setup a UserManager to keep track of users and give them unique 
	// user names and IDs.
	this.userManager = new UserManager();
	
	/**************************************************************************
	
	THIS CODE only works with FMS 2 and so was removed to run on my site.
	I only have 1.5.2 right now and need to upgrade...
	In the mean time see loadSampleClasses which does the same thing based
	manually entered paths to classes. Which is not to say either way
	is the best way... I just need something to load up the server-side code
	and set read/write access on the clients... though maybe read/write should
	be left global given this is just for samples...
	
	***************************************************************************
	
	// Scan the samples subdirectory and load files that have the same name
	// regardless of capitalization to their own directory.
	var samplesDirectory = new File("/source/samples");
	var samplesDirectoryList = samplesDirectory.list();
	var sampleClassNames = [];
	
	// For each sample directory load and instantiate a class of the same name
	// if one is available:
	for (var i = 0; i < samplesDirectoryList.length; i++){
		var shortDirectoryName = samplesDirectoryList[i].name.split("/").pop();
		var sampleDirectory = new File(samplesDirectoryList[i].name);
		var ascList = sampleDirectory.list(this.ascFileCheck);
		
		// Check each as or asc file in the directory to see if it's name matches the directory name:
		for (var ii = 0; ii < ascList.length; ii++){
			var fileName = ascList[ii].name.split("/").pop();
			if ( fileName.substring(0, fileName.indexOf(".")).toLowerCase() == shortDirectoryName.toLowerCase() ){
				var className = fileName.substring(0, fileName.indexOf("."));
				load(ascList[ii].name);
				// Add read and write control for the class name and set the class name on the classes's object too?
				// Need an array of sample classes etc..
				this.sampleObjects[className] = new _globalContext[className]();
				this.sampleObjects[className].className = className;
				sampleClassNames.push(className);
			} // end if
		} // end for
	}// end for
	
	this.sampleAccesString = sampleClassNames.join(";");	
	********************************************************************************/
}

SampleFramework.prototype.loadSampleClasses = function(){
	var sampleClassPath;
	var fileName;
	var className;
	var sampleClassNames = [];
	
	for(var i = 0; i < arguments.length; i++) {
		sampleClassPath = arguments[i];
		fileName = sampleClassPath.split("/").pop();
		className = fileName.substring(0, fileName.indexOf("."));
		if(className){
		// trace(className + ", " + fileName + ", " + sampleClassPath);
			load(sampleClassPath);
			this.sampleObjects[className] = new _globalContext[className]();
			sampleClassNames.push(className);
		}
		else {
			trace("Can't extract className from " + sampleClassPath);
		}
	}// end for each argument
	
	// Build a string for setting client read and write access
	// when clients connect.
	this.sampleAccesString = sampleClassNames.join(";");	
	
}

SampleFramework.prototype.ascFileCheck = function(fileName){
	return ( fileName.indexOf(".as") != -1 ); // should be ok for .asc and .as
}

SampleFramework.prototype.onAcceptClient = function(client){
	for (var sampleClassName in this.sampleObjects){
		var sampleObject = this.sampleObjects[sampleClassName];
		if (sampleObject.onAcceptClient) sampleObject.onAcceptClient(client);
	}
}

SampleFramework.prototype.onClientDisconnect = function(client){
	for (var sampleClassName in this.sampleObjects){
		var sampleObject = this.sampleObjects[sampleClassName];
		if (sampleObject.onClientDisconnect) sampleObject.onClientDisconnect(client);
	}
}

SampleFramework.prototype.setAllowDebug = function(propertyName, oldValue, newValue){
	sampleFramework.application.allowDebug = newValue;
	// trace("allowDebug changed to: " + sampleFramework.application.allowDebug);
}

////////////////// Functions to do!

SampleFramework.prototype.proxyAcceptConnection = function(client){
}

SampleFramework.prototype.proxyRejectConnection = function(client, errorObject){
}

SampleFramework.prototype.proxyDisconnect = function(client){
}

SampleFramework.prototype.proxyShutdown = function(){
}


sampleFramework = new SampleFramework();


function onApplicationStart(){
	// trace("onApplicationStart>");
	if (application.onAppStart) application.onAppStart();
}

function onApplicationStop(info){
	// trace("onApplicationStop> info.code: " + info.code);
	if (application.onAppStop) application.onAppStop.apply(application, arguments);
}

function onClientConnect(client, credentials){
	// trace("onClientConnect> client: " + client);
	
	client.writeAccess = sampleFramework.sampleAccesString;
	client.readAccess  = sampleFramework.sampleAccesString;
	
	if (sampleFramework.userManager.authenticate(client, credentials)){
		sampleFramework.application.acceptConnection(client);
		trace("client.user: " + client.user);
		client.call("initClientApplication", null, client.user);
	}
	else {
		sampleFramework.application.rejectConnection(client, {msg:"Invalid Credentials"});
	}
	
	sampleFramework.onAcceptClient(client);

	if (application.onConnect) application.onConnect.apply(application, arguments);

}

function onClientDisconnect(client){
	// trace("onClientDisconnect> client: " + client);
	sampleFramework.userManager.disconnect(client);
	sampleFramework.onClientDisconnect(client);
	if (application.onDisconnect) application.onDisconnect.apply(application, arguments);
}


/**
 * Like FCApplication in the original Macromedia framework this
 * class may be customized by developers in the main.asc file if
 * they want to handle events like onConnect in addition to what
 * the simple framework does. 
 */
function ProxyApplication(sampleFramework){

	// Set read-only properties:
	this.config  = sampleFramework.application.config;
	this.clients = sampleFramework.application.clients;
	this.hostname = sampleFramework.application.hostname;
	this.name = sampleFramework.application.name;
	this.server = sampleFramework.application.server;

	// The application.allowDebug property can be set by the user.
	// When they do they 
	this.allowDebug = sampleFramework.application.allowDebug;
	this.watch("allowDebug", SampleFramework.prototype.setAllowDebug);
	
	// Setup application methods that are not user defined:
	// Start with method calls the framework wants to handle first:
	this.acceptConnection = function(client){
		sampleFramework.proxyAcceptConnection(client);
	}
	
	this.rejectConnection = function(client, errorObject){
		sampleFramework.proxyRejectConnection(client, errorObject);
	}
	
	this.disconnect = function(client){
		return sampleFramework.proxyDisconnect(client);
	}
	
	this.shutdown = function(){
		return sampleFramework.proxyShutdown();
	}
	
	
	// These just call the sampleFramework.application method.
	// I should try to get rid of all this with one __resolve...
	this.broadcastMsg = function(){
		sampleFramework.application.broadcastMsg.apply(sampleFramework.application, arguments);
	}
	
	this.clearSharedObjects = function(){
		return sampleFramework.application.clearSharedObjects.apply(sampleFramework.application, arguments);
	}
	
	this.clearStreams = function(){
		return sampleFramework.application.clearStreams.apply(sampleFramework.application, arguments);
	}
	
	this.gc = function(){
		sampleFramework.application.gc.apply(sampleFramework.application, arguments);
	}
	
	this.getStats = function(){
		return sampleFramework.application.getStats.apply(sampleFramework.application, arguments);
	}
	
	this.registerClass = function(){
		return sampleFramework.application.registerClass.apply(sampleFramework.application, arguments);
	}

	this.registerProxy = function(){
		return sampleFramework.application.registerProxy.apply(sampleFramework.application, arguments);
	}
	
}

